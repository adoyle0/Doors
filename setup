#!/bin/bash
read -r -d '' HEADER <<-'EOF'
:::::::. :::::::..  .,::::::   :::.     .        :
 ;;;'';;';;;;``;;;; ;;;;''''   ;;`;;    ;;,.    ;;;
 [[[__[[\.[[[,/[[['  [[cccc   ,[[ '[[,  [[[[, ,[[[[,
 $$""""Y$$$$$$$$c    $$""""  c$$$cc$$$c $$$$$$$$"$$$
_88o,,od8P888b "88bo,888oo,__ 888   888,888 Y88" 888o
""YUMMMP" MMMM   "W" """"YUMMMYMM   ""` MMM  M'  "MMM

       Bash   Rules   Everything   Around   Me
-----------------------------------------------------
EOF

bin_dir="$HOME"/.local/bin
config_dir="$HOME"/.config
cache_dir="$HOME"/.cache/bream
git_url=https://git.doordesk.net/adam/bream.git

ensure_yay() {
    if [ ! "$(command -v yay)" ]; then
        echo "Installing yay..."

        local yay_dir="$cache_dir"/yay

        # git clone will return 0 even on error so clean up ahead of time
        rm -rf "$yay_dir"

        git clone https://aur.archlinux.org/yay.git "$yay_dir" &&
        cd "$yay_dir" &&
        makepkg -si --noconfirm || return 1
    fi

    return 0
}

install_base_arch() {
    echo "Installing base..."

    yay -S --needed --noconfirm \
        atool \
        archlinux-contrib \
        bat \
        btop \
        byobu \
        coreutils \
        fd \
        fzf \
        glow \
        go \
        man-db \
        man-pages \
        mosh \
        neovim \
        nnn \
        npm \
        oh-my-zsh-git \
        pacman-contrib \
        rate-mirrors \
        ripgrep \
        rsync \
        rubygems \
        sl \
        tar \
        tree \
        unrar \
        unzip \
        wget \
        zsh \
        &&

    cargo install leptosfmt || return 1

    return 0
}

init_browser() {
    echo "Setting default browser..."

    # Unset BROWSER because xdg gets pissy if it doesn't feel like it's the authority
    unset BROWSER &&
    xdg-settings set default-web-browser librewolf.desktop &&
    # Set it anyway
    export BROWSER=librewolf || return 1

    return 0
}

init_widgets() {
    echo "Configuring awesome widgets..."

    cd "$cache_dir" &&
    git submodule init &&
    git submodule update || return 1

    return 0
}

init_pywalfox() {
    if ! test -f "$HOME"/.librewolf/native-messaging-hosts/pywalfox.json; then
        echo "Configuring pywalfox..."
        pywalfox install --browser librewolf || return 1
    fi

    return 0
}

init_wallpaper() {
    # Copy default wallpaper if it doesn't exist
    if ! test -f "$HOME"/Pictures/Wallpapers/door2.jpg; then
        if ! test -d "$HOME"/Pictures/Wallpapers; then
            mkdir -p "$HOME"/Pictures/Wallpapers &&
            curl -so "$HOME"/Pictures/Wallpapers/door2.jpg https://old.doordesk.net/door2.jpg || return 1
        fi
    fi

    return 0
}

install_gui_arch() {
    yay -S --needed --noconfirm \
        acpi \
        alacritty \
        arandr \
        awesome \
        bluez \
        chromium \
        gnome-themes-extra \
        librewolf-bin \
        maim \
        noto-fonts \
        noto-fonts-cjk \
        noto-fonts-emoji \
        nsxiv \
        otf-commit-mono-nerd \
        otf-font-awesome \
        picom \
        playerctl \
        polkit-gnome \
        python-pywalfox-librewolf \
        redshift \
        unclutter \
        wallust \
        xclip \
        xorg-server \
        xorg-xinit \
        xorg-xrandr \
        xwallpaper \
        zathura \
        &&

    return 0
}

install_extras_arch() {
    yay -S --needed --noconfirm \
        discord \
        gimp \
        spotify-launcher \
        telegram-desktop \
        thunderbird \
        walogram-git \
        &&

    # Caprine depends on electon29 and it fails to build from the source it provides
    # A bin package exists so we're using it
    yay -S --needed --noconfirm electron29-bin &&

    # Ensure caprine comes after its dependency
    yay -S --needed --noconfirm caprine-bin || return 1

    return 0
}

init_nnn_plugins() {
    sh -c "$(curl -Ls https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs)" || return 1

    return 0
}

install_shell() {
    if ! [ "$SHELL" = "/bin/zsh" ]; then
        sudo chsh -s /bin/zsh "$USER" &&
        ln -sf "$HOME"/.config/shell/profile "$HOME"/.zprofile &&
        ln -sf "$HOME"/.config/x11/xinitrc "$HOME"/.xinitrc || return 1
        echo "Log out and back in for changes to take effect"
    fi

    return 0
}

install_configs() {
    [ ! -d "$config_dir" ] && { mkdir -p "$config_dir" || return 1; }

    cd "$cache_dir"/config &&
    for file in *; do
        local oldfile="$config_dir"/"$file"
        [ -e "$oldfile" ] && rm -rf "$oldfile"
        cp -r "$file" "$oldfile" || break
    done || return 1

    return 0
}

install_bin() {
    [ ! -d "$bin_dir" ] && { mkdir -p "$bin_dir" || return 1; }

    cd "$cache_dir" &&
    cp -r --update=all bin/* "$bin_dir" || return 1

    return 0
}

cleanup() {
    rm -rf "$cache_dir"
}

setup_arch() {
    sudo sed '/Color/s/^#//' -i /etc/pacman.conf &&
    sudo pacman -S --needed --noconfirm git base-devel &&

    if test -d "$cache_dir"; then
        cd "$cache_dir" &&
        git pull
    else
        git clone "$git_url" "$cache_dir"
    fi &&

    if [ "$1" -ge 1 ]; then
        ensure_yay &&
        install_base_arch || return 1
    fi &&

    if [ "$1" -ge 2 ]; then
        install_gui_arch &&
        init_browser &&
        init_widgets &&
        init_pywalfox &&
        init_wallpaper || return 1

    fi &&

    if [ "$1" -ge 3 ]; then
        install_extras_arch || return 1
    fi &&

    init_nnn_plugins &&
    install_bin &&
    install_configs &&
    install_shell &&

    # this should be last
    cleanup || return 1

    return 0
}

draw_header() {
    clear && echo "$HEADER" || return 1

    return 0
}

get_user_input() {
    read -r -p 'Choose your adventure:

 1. Base shell/CLI stuff only
 2. Above plus basic GUI stuff
 3. Above plus extras (bloat)

    Enter number: ' input &&

    # Filter input
    if ! [[ "$input" =~ ^[0-9]+$ ]]; then
        echo "Error: Not a number"
        exit 1

    elif [ "$input" -lt 1 ] || [ "$input" -gt 4 ]; then
        echo "Error: Input out of range"
        exit 1
    else
        echo "$input"
    fi || exit 1

    return 0
}

main() {
    draw_header

    user_input=$(get_user_input)

    draw_header

    # Detect OS and act accordingly
    . /etc/os-release
    local os_name=$NAME

    case "$os_name" in
        *Arch*)
            printf "Setup for %s\n\n" "$os_name"
            setup_arch "$user_input" || return 1
            ;;
        *)
            printf '%s' "$os_name is not supported at this time\n"
            return 1
            ;;
    esac

    return 0
}

{
    main && exit 0
    } || {
    echo "Setup failed" &&
    cleanup &&
    exit 1
}
